#Quantifying error correction through a rule-based model of strand escape from an [n]-rung ladder
#Authors: Morgan M. Cencer, Andrew J. Greenlee, Jeffrey S. Moore

#Model of 4 rung ladder escape
#Design rules: 1) ladders are made of two identical sides, connected by three rungs
#2) rungs are chemospecific, i.e. rungs are a-a, b-b, c-c and never a-b or a-c etc
#3) rung bonds are dynamic, i.e. the bond can be broken then reformed 
#3) all bonds are assumed to be formed at the same rate
#4) all bonds are assumed to dissociate at the same rate
#5) when all three bonds are broken the ladder sides separate and no intermolecular reactions can happen to rejoin the ladder

begin model

begin molecule types #these are the indivisible components in the reaction
L(a,b,c,d) #monomer with four specific/individual places for reaction
end molecule types

begin parameters
Lo 100 #initial concentration of fully bonded ladder
ka 0.01 #rate of bond formation
kd 0.01 #rate of bond dissociation
end parameters

begin seed species
L(a!1,b!2,c!3,d!4).L(a!1,b!2,c!3,d!4) Lo #starting with ladder and defining with starting concentration of Lo
end seed species

begin observables
Species Ladder L(a!1,b!2,c!3,d!4).L(a!1,b!2,c!3,d!4) #all fully bonded ladders
#Species ThreeRungs L(a!1,b!2,c!3,d).L(a!1,b!2,c!3,d),L(a!1,b!2,c,d!3).L(a!1,b!2,c,d!3),L(a!1,b,c!2,d!3).L(a!1,b,c!2,d!3),L(a,b!1,c!2,d!3).L(a,b!1,c!2,d!3) 
#all ladders with one rung open and three rungs closed
#Species TwoRungs L(a!1,b!2,c,d).L(a!1,b!2,c,d),L(a!1,b,c!3,d).L(a!1,b,c!3,d),L(a,b!2,c!3,d).L(a,b!2,c!3,d),L(a!1,b,c,d!2).L(a!1,b,c,d!2),L(a,b,c!1,d!2).L(a,b,c!1,d!2),L(a,b!1,c,d!2).L(a,b!1,c,d!2) 
#all ladders with two rungs open and two rungs closed
#Species OneRung L(a!1,b,c,d).L(a!1,b,c,d),L(a,b!1,c,d).L(a,b!1,c,d),L(a,b,c!1,d).L(a,b,c!1,d),L(a,b,c,d!1).L(a,b,c,d!1) 
#all ladders with three rungs open and one rung closed
Molecules Monomer L(a,b,c,d) #all the free strands
end observables

begin reaction rules
L(a!1).L(a!1)<->L(a).L(a) kd,ka #rule for dynamicity of the a rung without reference to other rungs
L(b!1).L(b!1)<->L(b).L(b) kd,ka #rule for dynamicity of the b rung without reference to other rungs
L(c!1).L(c!1)<->L(c).L(c) kd,ka #rule for dynamicity of the c rung without reference to other rungs
L(d!1).L(d!1)<->L(d).L(d) kd,ka #rule for dynamicity of the d rung without reference to other rungs
L(a!1,b,c,d).L(a!1,b,c,d)->L(a,b,c,d)+L(a,b,c,d) kd #rule for strand escape where a is the last rung
L(a,b!1,c,d).L(a,b!1,c,d)->L(a,b,c,d)+L(a,b,c,d) kd #rule for strand escape where b is the last rung
L(a,b,c!1,d).L(a,b,c!1,d)->L(a,b,c,d)+L(a,b,c,d) kd #rule for strand escape where c is the last rung
L(a,b,c,d!1).L(a,b,c,d!1)->L(a,b,c,d)+L(a,b,c,d) kd #rule for strand escape where d is the last rung
end reaction rules

end model

begin actions
generate_network(); #this generates a network
simulate_ode({suffix=>"ode",t_start=>0,t_end=>10000,n_steps=>100000}); #this does the simulation, with 100,000 steps over 10,000 seconds
end actions

